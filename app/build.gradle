apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion '23.0.3'
    defaultConfig {
        applicationId "ukalwa.moledetection"
        minSdkVersion 21
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        ndk{
            abiFilters 'armeabi-v7a', 'x86', 'arm64-v8a'
        }
        externalNativeBuild {
            cmake {
                cppFlags "-frtti -fexceptions"
                abiFilters 'armeabi-v7a', 'x86', 'arm64-v8a'
                arguments '-DANDROID_PLATFORM=android-19',
                        '-DANDROID_TOOLCHAIN=clang', '-DANDROID_STL=gnustl_static',
                        '-DPROJECT_ROOT='+projectDir, '-DOPENCV_SDK='+System.getenv('OPENCV_SDK')
            }
        }
    }
    sourceSets {
        main {
            jni.srcDirs = []
            jniLibs.srcDirs = ['src/main/jniLibs']
        }
    }
//
//    Properties properties = new Properties()
//    properties.load(project.rootProject.file('local.properties').newDataInputStream())
//    def ndkDir = properties.getProperty('ndk.dir')
//    task ndkBuild(type: Exec, description: 'Compile JNI via NDK'){
//        commandLine "$ndkDir\\ndk-build.cmd",
//                'NDK_PROJECT_PATH=build/intermediates/ndk',
//                'NDK_LIBS_OUT=src/main/jniLibs',
//                'APP_BUILD_SCRIPT=src/main/cpp/Android.mk',
//                'NDK_APPLICATION_MK=src/main/cpp/Application.mk'
//    }
//    tasks.withType(JavaCompile){
//        compileTask -> compileTask.dependsOn  ndkBuild
//    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
    splits {

        // Configures multiple APKs based on ABI.
        abi {

            // Enables building multiple APKs per ABI.
            enable true

            // By default all ABIs are included, so use reset() and include to specify that we only
            // want APKs for x86, armeabi-v7a, and mips.

            // Resets the list of ABIs that Gradle should create APKs for to none.
            reset()

            // Specifies a list of ABIs that Gradle should create APKs for.
            include "x86", "armeabi-v7a", "arm64-v8a"

            // Specifies that we do not want to also generate a universal APK that includes all ABIs.
            universalApk false
        }
    }

}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'
    compile 'com.google.android.gms:play-services:10.2.4'
    //compile 'com.android.support:appcompat-v7:23.2.1'
    compile project(':openCVLibrary320')
}
